# Git

使用一个思维导图来列出每一步需要怎么做！

Git is a version control system.

Git is free software.

---
---

## 设置当前机器的身份

Windows 上使用 Git 时，要打开应用程序 Git Bash 才行。

```Shell
git config --global user.name ""
git config --global user.email ""
```

> --global 参数表示，位于该计算机上的所有 Git 仓库都会使用这个配置。

---
---

## 创建版本库

选一个合适的地方，创建空目录，使用 pwd 命令查看当前目录。

> 尽量使用全英文的目录。
>> 使用已有东西的地方也可以，但不建议新手这么做。

```Shell
mkdir GitStore
cd GitStore
pwd
```

通过 git init 命令，将该目录转换为 Git 可以管理的仓库。

> 当前目录下会多出一个 .git 的目录，用来跟踪管理版本库，别乱动。
>> 该目录默认隐藏看不见的话，使用 ls -ah 命令即可看见。

```Shell
git init
```

---
---

## 将文件添加到版本库

***所有的版本控制系统，只能跟踪文本文件的改动！！！***

*微软的 Word 文档是二进制的，并不是文本文档……所以可惜了。*

将编写后的 UTF-8 编码的文档放到我们制作的目录下，子文件夹也可，然后添加到仓库并进行提交。

git 有两个区域，工作区和暂存区。

每次修改文件，文件会进入工作区。

* git add 就是把工作区的修改，提交到暂存区。
* git commit 就是把暂存区的修改，保存至本地库。
* git push 就是把本地库的记录，推送至远程库。

```Shell
git add XXX.txt
git commit -m "入门文档"
```

> -m 后面是本次提交的说明，可以输入任意内容。
>> 不要用 Windows 自带的记事本编辑，使用Notepad++，并选择 UTF-8 without BOM 即可。

commit 可以一次性提交很多文件，所以之前可以多次 add 。

```Shell
git add file1.txt
git add file2.txt file3.txt
git commit -m "add 3 files."
```

---

## 时光穿梭机

修改内容后，使用 git status 命令查看仓库当前的状态。可以显示至今为止对仓库进行的修改。

```Shell
git status
```

至于如何修改的，则需要使用 git diff 查看修改的细节。

```Shell
git diff
```

搞明白做了什么修改之后，再使用 git add ，会返回将要提交的修改文件，然后就可以放心提交了。

之后再用 git status 查看仓库状态，就会给出“工作目录是干净的”提示。

---

### 版本回退

Git 会保存文件的快照，这个快照就是 commit 。一旦有需求，就可以从最近的一个 commit 恢复文件，然后继续工作。

可以使用 git log 命令查看修改的历史纪录。如果嫌输出信息太多，也可以加上 --pretty=oneline 参数。

```Shell
git log
git log --pretty=oneline
```

> 必须要在 .git 文件存在的目录下才能使用该命令。

在 Git 中，使用 HEAD 表示当前版本，上一个版本是 HEAD^ ，上上个是 HEAD^^ ，往上100个可以用 HEAD~100 来表示。

若是想要将当前版本的文件回退到上一个版本，可以使用 git reset 命令。

```Shell
git reset --hard HEAD^
```

回退之后再使用 git log ，就看不到回退前的最新版本了，就好像真的回到了从前。

回到从前的方法，就是顺着尚未关闭的命令行，找到之前的个版本的 commit id ，再次使用 git reset 。

```Shell
git reset --hard 1094a
```

> 需要用版本号去索引，不过没必要写全， Git 会自动去找。
>> Git 内部有个指向当前版本的 HEAD 指针，所以改变版本就是改变指针指向而已。

为了防止不小心关掉了命令行界面， Git 提供了一个 git reflog 命令来记录每一次命令。

```Shell
git reflog
```

> 该命令的输出会在前头给出历史命令所在版本的坐标前一部分。

---

### 工作区和暂存区

在电脑中创建的目录，如 GIT 文件夹，就是工作区。

工作区中有一个隐藏目录 .git，这个不是工作区，而是 Git 的版本库。

版本库中存在着：

* 暂存区 stage ，或称为 index ；
* Git 自动创建的第一个分支 master ；
* 指向 master 的一个指针 HEAD 。

将文件加入版本库的步骤是：

1. 用 git add 把文件添加进去，实际上是把文件修改添加到暂存区；
2. 用 git commit 提交修改，实际上就是把暂存区的所有内容提交到当前分支。

> 因为我们在创建 Git 版本库的时候，Git 为我们自动创建了唯一一个 master 分支，所以现在 git commit 就是在往 master 分支上提交更改。

也就是说：

* 一旦在编辑器中修改了文件，工作区中就会有需要上交的内容；
* 使用 git add 命令，将工作区中的内容一个个加入暂存区；
* 使用 git commit 命令，将暂存区中的内容提交到默认分支。

> 使用 git status 命令，可以方便查看工作区和暂存区中的状态。

---

### 管理修改

***Git 跟踪修改，而非文件。***

改一 ====> git add ====> 改二 ====> git commit

> Git 管理的是修改，改一被推进暂存区，但是改二没有，所以 git commit 提交的是暂存区中的改一版本。

提交后，使用 git diff HEAD -- readme.txt 命令，查看工作区和版本库里最新版本的区别。

```Shell
git diff HEAD -- filename.txt
```

---

### 撤销修改

在工作区中，手动恢复文件到上一个版本，使用 git restore filename.txt 命令。

```Shell
git restore filename.txt
```

> 就是丢弃工作区的修改，回到上一个 git add ，或者 git commit 后，暂存区中或者默认分支中的状态。
>> 教程中使用的是 git checkout -- file 命令，不知道是不是版本变了。

若文件已经提交到暂存区，使用 git restore --staged filename.txt 命令，将暂存区的文件退回工作区。

```Shell
git restore --staged filename.txt
```

若是已经提交到了本地的版本库，那么就使用前面的版本回退功能进行修改。

---

### 删除文件

一般情况下，都是直接在文件管理器中把文件直接删除了，这样工作区和版本库就不一致了， git status 会立即回馈那些文件被删除了。

```Shell
rm filename.txt
git status
```

如果确实要从版本库中删除该文件，就要使用 git rm 命令来进行删除，并且随后 git commit 。

```Shell
git rm
git commit
```

> 如此一来，该文件才完全从版本库中被删除。

若是删错了，就可以使用 git checkout -- filename.txt 命令，从版本库复制其最新版本到工作区。

* 若是文件修改后没提交到暂存区，撤销修改后就进入了和版本库中一样的状态；
* 若是已经添加到暂存区之后，工作区的文件又进行了修改，撤销修改后就回到了暂存区中的状态。

```Shell
git checkout -- filename.txt
```

> 没有 commit 就被删除的文件，是无法恢复的。

---
---

## 远程仓库

本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：

### 1. 创建 SSH Key。

在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

```Shell
ssh-keygen -t rsa -C "youremail@example.com"

The key's randomart image is:
+---[RSA 3072]----+
|                 |
|    .            |
|   + .           |
|  + +  .         |
|.  = o  S        |
|oo= = =.E        |
|+*oB.X o.        |
|.+@*X.o..        |
|o*.*@B.o         |
+----[SHA256]-----+
```

你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

### 2. 登陆GitHub，打开“Account settings”，“SSH Keys”页面。

点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

点“Add Key”，你就应该看到已经添加的Key。

为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。

如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。

---

### 添加远程库

本地已有 Git 仓库，再在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步。

```Shell
git remote add origin git@github.com:YuYvGuo/nwuA.git
git remote add origin https://github.com/YuYvGuo/nwuA.git
git push -u origin master
```

> origin 是远程库的名字， Git 的默认叫法。

把本地库的内容推送到远程，用 git push 命令，实际上是把当前分支 master 推送到远程。

> 由于远程库是空的，我们第一次推送 master 分支时，加上了 -u 参数， Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。

从现在起，只要本地作了提交，就可以通过 git push 命令推送到远程库。

***而不用加上 -u 了！***

```Shell
git push origin master
```

> 把本地master分支的最新修改推送至GitHub，真正的分布式版本库就成型了。

如果远程库网址输入错误，可以用 rm 命令删除已存在的远程库 origin ，得以重新关联。

```Shell
git remote rm origin
```

***SSH警告的问题，以后遇到再说。***

### 从远程库克隆

***Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。***

GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

使用 git clone 指令克隆一个本地库，然后就可以在当前的目录下面找到文件夹了。

```Shell
git clone git@github.com:YuYvGuo/clonetest123123.git
git clone https://github.com/YuYvGuo/clonetest123123
```









































