# Git

Git is a version control system.

Git is free software.

## 设置当前机器的身份

Windows 上使用 Git 时，要打开应用程序 Git Bash 才行。

```Shell
git config --global user.name ""
git config --global user.email ""
```

> --global 参数表示，位于该计算机上的所有 Git 仓库都会使用这个配置。

## 创建版本库

选一个合适的地方，创建空目录，使用 pwd 命令查看当前目录。

> 尽量使用全英文的目录。
>> 使用已有东西的地方也可以，但不建议新手这么做。

```Shell
mkdir GitStore
cd GitStore
pwd
```

通过 git init 命令，将该目录转换为 Git 可以管理的仓库。

> 当前目录下会多出一个 .git 的目录，用来跟踪管理版本库，别乱动。
>> 该目录默认隐藏看不见的话，使用 ls -ah 命令即可看见。

```Shell
git init
```

## 将文件添加到版本库

***所有的版本控制系统，只能跟踪文本文件的改动！！！***

*微软的 Word 文档是二进制的，并不是文本文档……所以可惜了。*

将编写后的 UTF-8 编码的文档放到我们制作的目录下，子文件夹也可，然后添加到仓库并进行提交。

git 有两个区域，工作区和暂存区。

每次修改文件，文件会进入工作区。

* git add 就是把工作区的修改，提交到暂存区。
* git commit 就是把暂存区的修改，保存至本地库。
* git push 就是把本地库的记录，推送至远程库。

```Shell
git add XXX.txt
git commit -m "入门文档"
```

> -m 后面是本次提交的说明，可以输入任意内容。
>> 不要用 Windows 自带的记事本编辑，使用Notepad++，并选择 UTF-8 without BOM 即可。

commit 可以一次性提交很多文件，所以之前可以多次 add 。

```Shell
git add file1.txt
git add file2.txt file3.txt
git commit -m "add 3 files."
```

## 时光穿梭机

修改内容后，使用 git status 命令查看仓库当前的状态。可以显示至今为止对仓库进行的修改。

```Shell
git status
```

至于如何修改的，则需要使用 git diff 查看修改的细节。

```Shell
git diff
```

搞明白做了什么修改之后，再使用 git add ，会返回将要提交的修改文件，然后就可以放心提交了。

之后再用 git status 查看仓库状态，就会给出“工作目录是干净的”提示。

### 版本回退

Git 会保存文件的快照，这个快照就是 commit 。一旦有需求，就可以从最近的一个 commit 恢复文件，然后继续工作。

可以使用 git log 命令查看修改的历史纪录。如果嫌输出信息太多，也可以加上 --pretty=oneline 参数。

```Shell
git log
git log --pretty=oneline
```

> 必须要在 .git 文件存在的目录下才能使用该命令。

在 Git 中，使用 HEAD 表示当前版本，上一个版本是 HEAD^ ，上上个是 HEAD^^ ，往上100个可以用 HEAD~100 来表示。

若是想要将当前版本的文件回退到上一个版本，可以使用 git reset 命令。

```Shell
git reset --hard HEAD^
```

回退之后再使用 git log ，就看不到回退前的最新版本了，就好像真的回到了从前。

回到从前的方法，就是顺着尚未关闭的命令行，找到之前的个版本的 commit id ，再次使用 git reset 。

```Shell
git reset --hard 1094a
```

> 需要用版本号去索引，不过没必要写全， Git 会自动去找。
>> Git 内部有个指向当前版本的 HEAD 指针，所以改变版本就是改变指针指向而已。

为了防止不小心关掉了命令行界面， Git 提供了一个 git reflog 命令来记录每一次命令。

```Shell
git reflog
```

> 该命令的输出会在前头给出历史命令所在版本的坐标前一部分。

### 工作区和暂存区

在电脑中创建的目录，如 GIT 文件夹，就是工作区。

工作区中有一个隐藏目录 .git，这个不是工作区，而是 Git 的版本库。

版本库中存在着：

* 暂存区 stage ，或称为 index ；
* Git 自动创建的第一个分支 master ；
* 指向 master 的一个指针 HEAD 。

将文件加入版本库的步骤是：

1. 用 git add 把文件添加进去，实际上是把文件修改添加到暂存区；
2. 用 git commit 提交修改，实际上就是把暂存区的所有内容提交到当前分支。

> 因为我们在创建 Git 版本库的时候，Git 为我们自动创建了唯一一个 master 分支，所以现在 git commit 就是在往 master 分支上提交更改。

也就是说：

* 一旦在编辑器中修改了文件，工作区中就会有需要上交的内容；
* 使用 git add 命令，将工作区中的内容一个个加入暂存区；
* 使用 git commit 命令，将暂存区中的内容提交到默认分支。

> 使用 git status 命令，可以方便查看工作区和暂存区中的状态。
















